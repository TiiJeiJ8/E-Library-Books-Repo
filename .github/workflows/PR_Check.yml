name: E-Library-Books-Repo PR Check

on:
    push:
        paths:
        - 'library/**'
    pull_request:
        paths:
        - 'library/**'

jobs:
    name-check:
        name: Library filename format check
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v4

            -   name: Get changed files
                id: changes
                run: |
                    # list files changed in this push/PR
                    if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
                        git fetch --no-tags --prune --depth=1 origin +refs/pull/${{ github.event.number }}/merge || true
                        FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD || true)
                    else
                        FILES=$(git diff --name-only HEAD^ HEAD || true)
                    fi
                    echo "changed_files<<EOF" >> $GITHUB_OUTPUT
                    echo "$FILES" >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT

            -   name: Check library path and filename format
                run: |
                    set -euo pipefail
                    echo "Checking modified files under library/ ..."
                    FILES="${{ steps.changes.outputs.changed_files }}"
                    if [ -z "$FILES" ]; then
                        echo "No changed files detected."
                        exit 0
                    fi

                    # Allowed file extensions (case-insensitive)
                    ALLOWED_EXT="pdf|epub|mobi|azw3|azw|txt|cbz|cbr"

                    # Expected path pattern:
                    # library/Author-Last-Name-First-Name/Book-Title-YYYY/<filename>
                    # We'll validate both the directory structure and filename conventions.

                    FAIL=0
                    while IFS= read -r f; do
                        # only check files under library/
                        case "$f" in
                        library/*)
                            ;;
                        *)
                            continue
                            ;;
                        esac

                    # path components
                    # require at least 3 parts: library/Author/.../file
                    PARTS_COUNT=$(echo "$f" | awk -F'/' '{print NF}')
                    if [ "$PARTS_COUNT" -lt 3 ]; then
                        echo "ERROR: '$f' does not have enough subdirectories (expected library/Author/Book-Title/... )."
                        FAIL=1
                        continue
                    fi

                    # filename validation
                    FNAME=$(basename "$f")
                    EXT=$(echo "$FNAME" | awk -F. '{print tolower($NF)}')

                    if ! echo "$EXT" | grep -Eiq "^($ALLOWED_EXT)$"; then
                        echo "ERROR: '$f' has disallowed extension '.$EXT'. Allowed: $ALLOWED_EXT"
                        FAIL=1
                        continue
                    fi

                    # filename should start with AuthorLastName_BookTitle_Year (year 4 digits)
                    # allow additional suffixes like -1 or -part
                    if ! echo "$FNAME" | grep -Eiq '^[A-Za-z0-9]+_[A-Za-z0-9]+_([0-9]{4})([-_a-zA-Z0-9]*)?\.[A-Za-z0-9]+$'; then
                        echo "ERROR: '$f' filename does not match expected pattern 'AuthorLastName_BookTitle_YYYY[...].ext'"
                        FAIL=1
                        continue
                    fi
                    done <<< "$FILES"

                    if [ "$FAIL" -ne 0 ]; then
                        echo "One or more filename/path checks failed."
                        exit 1
                    fi

                    echo "All checked files passed filename/path validation."